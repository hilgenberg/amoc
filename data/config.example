# This is a configuration file for the MOC player.  It should be named
# 'config' and placed in the ~/.moc directory.  As this file can specify
# commands which invoke other applications, MOC will refuse to start if it
# is not owned by either root or the current user, or if it is writable by
# anyone other than its owner.  All options are given with their default
# values, and therefore commented.

# In which directory do you store your music files?  If you specify it
# you will be able to jump straight to this directory with the 'm'
# command.
#
# Example:    MusicDir = "/home/joe/music"
#
#MusicDir =

# Always start in the music directory?  If set to 'no', start in the
# last visited or the current directory.  A single directory on the
# command line takes precedence.
#StartInMusicDir = no

# Show files with dot at the beginning?
#ShowHiddenFiles = no

# Hide file name extensions?
#HideFileExtension = no

# Sound driver - JACK, ALSA, OSS, SNDIO (or NULL for debugging).
# When not set, it will try all (except NULL) in the above order
#SoundDriver = 

# Override the TERM environment variable? This can be useful to get
# the mouse to work properly (if dragging does not work).
#
# Example:    TERM = xterm-1003
#
#TERM =

# Set playback toggles.
#Repeat = no
#Shuffle = no
#AutoNext = yes

# Show file titles (title, author, album) instead of file names?
#ReadTags = yes

# Display the mixer/volume with the other information?
#ShowMixer = yes

# Save software mixer state?
# If enabled, a file 'softmixer' will be created in '~/.moc/' storing the
# mixersetting set when the server is shut down.
# Note that there is a "hidden" 'Amplification' setting in that file.
# Amplification (0-200) is used to scale the mixer setting (0-100).  This
# results in a higher signal amplitude but may also produce clipping.
#Softmixer_SaveState = yes

# Save equalizer state?
# If enabled, a file 'equalizer' will be created in '~/.moc/' storing the
# equalizer settings when the server is shut down.
# Note that there is a "hidden" 'Mixin' setting in that file.
# Mixin (0.0-1.0) is used to determine how much of the original signal is
# used after equalizing.  0 means to only use the equalized sound, while 1
# effectively disabled the mixer.  The default is 0.25.
#Equalizer_SaveState = yes

# Draw a line as the time progress bar? TimeBarLine is for the filled part
# of the bar, TimeBarSpace for the rest. If only TimeBarLine is set, it is
# used for both. If only TimeBarSpace is set, it is ignored.
#
# Example:    
#     TimeBarLine  = "╼"
#     TimeBarSpace = "─"
#
#TimeBarLine = 
#TimeBarSpace = 

# How fast to seek (in number of seconds per keystroke).  The first
# option is for normal seek and the second for silent seek.
#SeekTime = 1
#SilentSeekTime = 5

# Use realtime priority for output buffer thread.  This will prevent gaps
# while playing even with heavy load.  The user who runs MOC must have
# permissions to set such a priority.  This could be dangerous, because it
# is possible that a bug in MOC will freeze your computer.
#UseRealtimePriority = no

# Display full paths instead of just file names in the playlist.
#PlaylistFullPaths = yes

# How long (in seconds) to leave a message displayed on the screen.
# Setting this to a high value allows you to scroll through the messages
# using the 'hide_message' key.  Setting it to zero means you'll have to
# be quick to see any message at all.  Any new messages will be queued up
# and displayed after the current message's linger time expires.
#MessageLingerTime = 2

# RatingFile is searched in every directory containing music files.
# Ratings files are plaintext files where every line starts with a
# rating (0..5), followed by a single space and a filename the rating
# applies to. Example:
#
# 5 song1.mp3
# 3 song2.mp3
# 4 song3.mp3
# 1 song42.ogg
#
# For shared libraries "ratings_alice", "ratings_bob", etc can be used.
#
#RatingFile = "ratings"

# RatingStar and RatingSpace are used to generate the rating strings.
# They can be UTF-8, but must be single characters.
#RatingStar  = "*"
#RatingSpace = " "

# MOC directory (where pid file, socket and state files are stored).
# You can use ~ at the beginning.
#MOCDir = ~/.moc

# Input and output buffer sizes (in kilobytes).
#InputBuffer  = 512                 # Minimum value is 32KB
#OutputBuffer = 512                 # Minimum value is 128KB

# How much to fill the input buffer before playing (in kilobytes)?
# This can't be greater than the value of InputBuffer.  While this has
# a positive effect for network streams, it also causes the broadcast
# audio to be delayed.
#Prebuffering = 64

# Use this HTTP proxy server for internet streams.  If not set, the
# environment variables http_proxy and ALL_PROXY will be used if present.
#
# Format: HTTPProxy = PROXY_NAME:PORT
#
#HTTPProxy =

# Jack output settings.
#JackClientName = "moc"
#JackStartServer = no
#JackOutLeft  = "system:playback_1"
#JackOutRight = "system:playback_2"

# OSS output settings.
#OSSDevice = /dev/dsp
#OSSMixerDevice = /dev/mixer
#OSSMixerChannel1 = pcm             # 'pcm', 'master' or 'speaker'
#OSSMixerChannel2 = master          # 'pcm', 'master' or 'speaker'

# ALSA output settings.  If you need to dump the audio produced by MOC
# to a file for diagnostic purposes, the following setting of 'ALSADevice'
# should do that:
#
#    ALSADevice=tee:hw,'/tmp/out.wav',wav
#
#ALSADevice = default
#ALSAMixer1 = PCM
#ALSAMixer2 = Master

# Under some circumstances on 32-bit systems, audio played continously
# for long periods of time may begin to stutter.  Setting this option to
# 'yes' will force MOC to avoid ALSA's dmix resampling and prevent this
# stutter.  But it also has other implications:
#
# - You may experience unacceptably high CPU load.
# - ALSA's resampler plug-ins will not be used.
# - The resampling may be of lower quality than ALSA would provide.
# - You may need to try different "ResampleMethod" option settings.
# - The "ForceSampleRate" option may be ineffective.
# - If libsamplerate is not configured, many audios may be unplayable.
#
#ALSAStutterDefeat = no

# Use mmap() to read files.  mmap() is much slower on NFS.
#UseMMap = no

# Use MIME to identify audio files.  This can make for slower loading
# of playlists but is more accurate than using extensions.
#UseMimeMagic = no

# Use librcc to filenames and directory names encoding.
#UseRCCForFilesystem = no

# Enable the conversion of filenames from the local encoding to UTF-8.
#FileNamesIconv = no

# Which resampling method to use.  There are a few methods of resampling
# sound supported by libresamplerate.  The default is 'Linear') which is
# also the fastest.  A better description can be found at:
#
#    http://www.mega-nerd.com/libsamplerate/api_misc.html#Converters
#
# but briefly, the following methods are based on bandlimited interpolation
# and are higher quality, but also slower:
#
#    SincBestQuality   - really slow (I know you probably have an xx GHz
#                        processor, but it's still not enough to not see
#                        this in the top output :)  The worst case
#                        Signal-to-Noise Ratio is 97dB.
#    SincMediumQuality - much faster.
#    SincFastest       - the fastest bandlimited interpolation.
#
# And these are lower quality, but much faster methods:
#
#    ZeroOrderHold - really poor quality, but it's really fast.
#    Linear - a bit better and a bit slower.
#
#ResampleMethod = Linear

# Always use this sample rate (in Hz) when opening the audio device (and
# resample the sound if necessary).  When set to 0 the device is opened
# with the file's rate.
#ForceSampleRate = 0

# By default, even if the sound card reports that it can output 24bit samples
# MOC converts 24bit PCM to 16bit.  Setting this option to 'yes' allows MOC
# to use 24bit output.  (The MP3 decoder, for example, uses this format.)
# This is disabled by default because there were reports that it prevents
# MP3 files from playing on some soundcards.
#Allow24bitOutput = no
